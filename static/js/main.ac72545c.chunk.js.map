{"version":3,"sources":["components/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","types/Person.ts","components/PersonLink/PersonLink.tsx","variables.ts","components/PersonItem/PersonItem.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","types/SortField.ts","types/SearchOptions.ts","contexts/PeopleContext.tsx","components/PeopleList/PeopleList.tsx","components/PeopleFilters/PeopleFilters.tsx","components/PeoplePage/PeoplePage.tsx","utils/peopleHelper.ts","components/NotFoundPage/NotFoundPage.tsx","components/PageNavigation/PageNavigation.tsx","components/PageContent/PageContent.tsx","App.tsx","index.tsx"],"names":["HomePage","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonSex","PersonLink","person","slug","sex","name","useSearchParams","allParams","toString","to","classNames","Female","CENTURIES","PersonItem","selectedSlug","born","died","fatherName","motherName","father","mother","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","searchParams","search","SortField","SearchOptions","PeopleContext","React","createContext","PeopleContextProvider","useState","people","setPeople","get","Sex","query","Query","centuries","getAll","Centuries","sort","Sort","order","Order","visiblePeople","useMemo","peopleCopy","filter","condition","fixedQuery","toLowerCase","includes","length","Math","ceil","personA","personB","Name","localeCompare","Born","Died","reverse","Provider","PeopleList","useContext","useParams","personId","getSortParams","sortType","map","PeopleFilters","setSearchParams","Male","type","placeholder","onChange","event","target","century","currentCenturie","centurie","PeoplePage","isLoading","setIsLoading","isError","setIsError","useEffect","currentPeople","find","getPreparedPeople","catch","finally","isSuccessRequest","isFailRequest","isNoPeopleOnServer","isNoVisiblePeople","isVisiblePeople","NotFoundPage","PageNavigation","getLinkClass","isActive","role","PageContent","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ac72545c.chunk.js","sourcesContent":["export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export interface Person {\n  name: string,\n  sex: PersonSex,\n  born: number,\n  died: number,\n  fatherName: string | null,\n  motherName: string | null,\n  slug: string,\n  mother?: Person,\n  father?: Person,\n}\n\nexport enum PersonSex {\n  Female = 'f',\n  Male = 'm',\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Person, PersonSex } from '../../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n  const [params] = useSearchParams();\n\n  const allParams = params.toString();\n\n  return (\n    <Link\n      to={`${slug}?${allParams}`}\n      className={\n        classNames({\n          'has-text-danger': sex === PersonSex.Female,\n        })\n      }\n    >\n      {name}\n    </Link>\n  );\n};\n","export const NOT_SET_VALUE = '-';\nexport const CENTURIES = ['16', '17', '18', '19', '20'];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { NOT_SET_VALUE } from '../../variables';\n\ntype Props = {\n  person: Person;\n  selectedSlug: string;\n};\n\nexport const PersonItem: React.FC<Props> = ({ person, selectedSlug }) => {\n  const {\n    born,\n    died,\n    fatherName,\n    motherName,\n    sex,\n    father,\n    mother,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      className={\n        classNames({ 'has-background-warning': selectedSlug === slug })\n      }\n      data-cy=\"person\"\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NOT_SET_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SortField {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export enum SearchOptions {\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import React, { useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SortField } from '../types/SortField';\nimport { SearchOptions } from '../types/SearchOptions';\n\ninterface IPeopleContext {\n  people: Person[];\n  setPeople: React.Dispatch<React.SetStateAction<Person[]>>;\n  visiblePeople: Person[];\n}\n\nexport const PeopleContext = React.createContext({} as IPeopleContext);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleContextProvider: React.FC<Props> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchOptions.Sex) || '';\n  const query = searchParams.get(SearchOptions.Query) || '';\n  const centuries: string[] = searchParams.getAll(\n    SearchOptions.Centuries,\n  ) || [];\n  const sort = searchParams.get(SearchOptions.Sort) || '';\n  const order = searchParams.get(SearchOptions.Order) || '';\n\n  const visiblePeople = useMemo(() => {\n    const peopleCopy = people.filter(person => {\n      let condition = true;\n\n      if (sex) {\n        condition = condition && person.sex === sex;\n      }\n\n      if (query) {\n        const fixedQuery = query.toLowerCase();\n\n        condition = condition\n          && (person.name.toLowerCase().includes(fixedQuery)\n            || (person.motherName?.toLowerCase().includes(fixedQuery) || false)\n            || person.fatherName?.toLowerCase().includes(fixedQuery) || false);\n      }\n\n      if (centuries.length) {\n        condition = condition\n          && centuries.includes(`${Math.ceil(person.born / 100)}`);\n      }\n\n      return condition;\n    });\n\n    if (sort) {\n      peopleCopy.sort((personA, personB) => {\n        switch (sort) {\n          case SortField.Name:\n            return personA.name.localeCompare(personB.name);\n          case SortField.Sex:\n            return personA.sex.localeCompare(personB.sex);\n          case SortField.Born:\n            return personA.born - personB.born;\n          case SortField.Died:\n            return personA.died - personB.died;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      peopleCopy.reverse();\n    }\n\n    return peopleCopy;\n  }, [people, sex, query, centuries, sort, order]);\n\n  return (\n    <PeopleContext.Provider value={{\n      people,\n      setPeople,\n      visiblePeople,\n    }}\n    >\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PersonItem } from '../PersonItem/PersonItem';\nimport { SearchLink } from '../SearchLink/SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\nimport { PeopleContext } from '../../contexts/PeopleContext';\nimport { SortField } from '../../types/SortField';\nimport { SearchOptions } from '../../types/SearchOptions';\n\ntype Props = {};\n\nexport const PeopleList: React.FC<Props> = () => {\n  const { visiblePeople } = useContext(PeopleContext);\n\n  const { personId = '' } = useParams();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(SearchOptions.Sort) || '';\n  const order = searchParams.get(SearchOptions.Order) || '';\n\n  const getSortParams = (sortType: SortField): SearchParams => {\n    if (sort !== sortType) {\n      return {\n        [SearchOptions.Sort]: sortType,\n        [SearchOptions.Order]: null,\n      };\n    }\n\n    if (sort === sortType && !order) {\n      return { [SearchOptions.Order]: 'desc' };\n    }\n\n    return {\n      [SearchOptions.Sort]: null,\n      [SearchOptions.Order]: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SortField).map(([key, value]) => (\n            <th key={key}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {key}\n                <SearchLink params={getSortParams(value)}>\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': sort !== value,\n                      'fa-sort-up': sort === value && !order,\n                      'fa-sort-down': sort === value && order,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visiblePeople.map(person => (\n          <PersonItem\n            key={person.slug}\n            person={person}\n            selectedSlug={personId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from '../SearchLink/SearchLink';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { CENTURIES } from '../../variables';\nimport { PersonSex } from '../../types';\nimport { SearchOptions } from '../../types/SearchOptions';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get(SearchOptions.Sex) || '';\n  const query = searchParams.get(SearchOptions.Query) || '';\n  const centuries: string[] = searchParams.getAll(\n    SearchOptions.Centuries,\n  ) || [];\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        [SearchOptions.Query]: event.target.value || null,\n      }),\n    );\n  };\n\n  const getCenturiesByToggle = (currentCenturie: string) => {\n    return centuries.includes(currentCenturie)\n      ? centuries.filter(centurie => currentCenturie !== centurie)\n      : [...centuries, currentCenturie];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ [SearchOptions.Sex]: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={\n            classNames({ 'is-active': sex === PersonSex.Male })\n          }\n          params={{ [SearchOptions.Sex]: PersonSex.Male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={\n            classNames({ 'is-active': sex === PersonSex.Male })\n          }\n          params={{ [SearchOptions.Sex]: PersonSex.Male }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleChangeQuery}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={\n                  classNames('button', 'mr-1', {\n                    'is-info': centuries.includes(century),\n                  })\n                }\n                params={{\n                  [SearchOptions.Centuries]: getCenturiesByToggle(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={\n                classNames('button', 'is-success', {\n                  'is-outlined': centuries.length,\n                })\n              }\n              params={{ [SearchOptions.Centuries]: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            [SearchOptions.Centuries]: [],\n            [SearchOptions.Sex]: null,\n            [SearchOptions.Query]: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Loader } from '../Loader';\nimport { PeopleList } from '../PeopleList/PeopleList';\nimport { PeopleFilters } from '../PeopleFilters/PeopleFilters';\nimport { getPreparedPeople } from '../../utils/peopleHelper';\nimport { PeopleContext } from '../../contexts/PeopleContext';\n\nexport const PeoplePage = () => {\n  const { people, setPeople, visiblePeople } = useContext(PeopleContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(currentPeople => {\n        setPeople(getPreparedPeople(currentPeople));\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const isSuccessRequest = !isLoading && !isError;\n  const isFailRequest = isError && !isLoading;\n  const isNoPeopleOnServer = !people.length && isSuccessRequest;\n\n  const isNoVisiblePeople = !!people.length\n    && !visiblePeople.length\n    && isSuccessRequest;\n\n  const isVisiblePeople = !!visiblePeople.length && isSuccessRequest;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isFailRequest && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isNoVisiblePeople && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {isVisiblePeople && (\n                <PeopleList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport function getPreparedPeople(people: Person[]) {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n}\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nexport const PageNavigation = () => {\n  const getLinkClass = (\n    { isActive }: { isActive: boolean },\n  ) => classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n\n  const [params] = useSearchParams();\n\n  const allParams = params.toString();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to={`/people?${allParams}`}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { PageNavigation } from '../PageNavigation/PageNavigation';\n\nexport const PageContent = () => {\n  return (\n    <>\n      <PageNavigation />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n","import './App.scss';\nimport {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\nimport { PageContent } from './components/PageContent/PageContent';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Routes>\n      <Route path=\"/\" element={<PageContent />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId\" />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeopleContextProvider } from './contexts/PeopleContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <PeopleContextProvider>\n        <App />\n      </PeopleContextProvider>\n    </Router>\n    ,\n  );\n"],"sourceRoot":""}